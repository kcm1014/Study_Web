호이스팅(hoisting) : 변수 선언을 포함한 모든 선언문을 찾아서 먼저 실행하는 기능

console.log(sst);                // 호이스팅으로  sst를 선언은 되었지만 현재 undefined 상태이다.
var sst = "상상톤";              // 실행시점에 값이 대입된다.
console.log(sst);                // "상상톤"이 출력된다.
=================================================================================================================
console.log(add(2,5));  // 호출 이전에 호이스팅되어 정상 작동
console.log(sub(2,5));  // sub is not function  선언은 되어 있지만 현재 undefined 상태 


//함수 선언은 런타임 이전에 실해ㅐㅇ되어 , 함수 자체를 호이스팅 시킨다.
function add(x,y){  
    return x + y;
}

//함수 표현식은 런타임 이전에는 undefined로 초기화 된다.
var sub = function(x,y){
    return x + y;
}
=================================================================================================================
var 키워드의 문제점
    -. 변수 중복 선언이 가능하여, 예기치 못한 값을 반환할 수 있다.
    -. 함수 레벨 스코프로 인해 함수 외부에서 선언한 변수는 모두 전역 변수화 한다.
    -. 변수 선언 이전에 변수를 참조하면 언제나 undefined를 반환한다.

let 키워드
    -. 변수 중복 선언이 불가능하지만, 재할당은 가능하다.
    -. 초기화 단계가 진행되지 않은 상태로 접근할경우 참조 에러 발생

const 키워드
    -.반드시 선언과 초기화를 동시에 진행되어야 한다.
    -.중복 선언 불가
    -.재할당 불가 ( 개체는 가능 )

console.log(name);  // undefined
//console.log(name1);   Cannot access 'name1' before initialization
//console.log(name2);   Cannot access 'name2' before initialization
var name = "sst";
let name1 = "sst1";
const name2 = "sst2";

console.log(name1);
console.log(name2);
=================================================================================================================
기본형 타입
    number, string, boolean, undefined, null
    
배열
    let 변수이름=[데이터[,...]]
    let userName = ["철수", "영희", "선희", "영자","병철"];


var $a; // jquery 객체를 담는 변수 , jquery에서 사용하는 내장함수를 모두 사용 할 수 있다. .css(), .hide(), .show() 등..
var a;  // 일반 javascript 변수,는 jquery 에서 사용하는 내장함수 사용할 수 없음.
=================================================================================================================
암시적 형변환
숫자형 + 문자형 = 문자형
불린형 + 문자형 = 문자형
불리형 + 숫자형 = 숫자형

명시적 형변환
parseInt()    //let a = parseInt("1234");
Number()      //let a = Number("1234");

parseFloat()  //let a = parseFloat("1234.45");
Number()      //let a = Number("1234.45");

String()      //let a = String(1234);

Number.toString() // 15.toString(16);   // 결과 : "f"
Number.toFixed()  // 123.456.toFixed(2);  // 결과 : "123.45"
=================================================================================================================